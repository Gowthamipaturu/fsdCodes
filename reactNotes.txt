React Notes

******To start react******  
1. Need to run "npx create-react-app gowthami-app" in a new terminal
2. "cd gowthami-app" Change of directory
3. npm start -->
<!-- gowthami-app will be created & shows folders.
        #### node_modules
        #### public
        #### src etc., -->
<!-- FolderStructure
    1. public: Inside the public folder,
    ## favicon
    ## index.html
    ## logo 
    ## manifest.json
    ## robots.txt files will be there. 
    *****Whenever we run the app, whatever code in index.html will display first. 
    *****we update the content in index.html page inside <div>element.
    *****We need to send the data using "root" id inside the <div> element, before react we are using "jQuery" to get data using jQuery element by id.
    2. src: Inside src folder,
    ## app.css
    ## app.js
    ## app.test.js
    ## index.js
    ## logo.svg
    ## reportWebVitals.js
    ##setupTests.js
    ***** First executing file is index.js, index.js will give the data to index.html which is in src folder.
    ***** root.render(here, render means display/sending data)
    ##################################################################################### rafce: ReactArrowFunctionComponentExport
    #### we can create components(files we can call as components in react) to make simple & fast execution/correcting codes.
    #### We can create(<app/>) componet & import in index.js & export to index.html

########@@@@1st Class@@@@###########
Why React????
**When we will do the project using React, the webpage won't be refresh for everytime while going to one page to another
**React will use only one html page & update all the content in single page only.
**React will use Virtual Dom, html uses real Dom.
**Real dom means, the content/code everything we can see. If we need to search for the single key/content, the page will be reloaded/refresh everytime.
**Virtual dom means, the content/code have many files in backend. When we search for the key/content, process will be done in backend & updates the content without reloading the page.
****Advantage of React is 
#########Can do single page applications
#########Build the code in single page, will convert it into html,Css & Javascript 
*****React Structure:
#######We have Public & Src Folders
#######In public folder, will have html file(index.html), favicon.ico, logo etc.,
#######JQuery - Before react we were using JQuery to send/receive data using Id. Get element by Id using inner html, get element by Id using outer html.
#######Rending means data sending/displaying
####### In Src folder, app.css, app.js, app.test.js, index.css, index.js,logo etc.,
#######index.html will get the data from index.js, using "root.render"
#######We have one default component in src folder, i.e., App.js
######To create new components:
@@@ In parent component <componentName/>(Ex: <About/>)
@@@ Create a new component, name it as About.js.
@@@ To open About.js, we can directly go to the component/can open from parent component using "ctrl+right click"
@@@After creating the component, "rafce"(ReactArrowFunctionExportComponent),Enter
@@@Import About from ./About in the parent component.
######To simplify & fast checking of codes, we will divide into components
***********In react we can share the data using single set of component only
*********** <></> React Fragment.

@@@@@@@@@@@@@@@@@@@ 2nd Class @@@@@@@@@@@@@@@@@@@@@@@@@
### In React JSX, we can write Javascript & html in single component
### we can return Javascript code before return function & html code in return function.
%%%%%% Props:
### We use "props" to send data from one component to another
Ex: ParentComponent: <About fname={name} age={age} isTeacher={isTeacher} skills={skills} data={data}/> 
    ChildComponent :
    const About = (props) => {
    console.log("props", props)
  return (
    <>
    <h1>{props.fname}</h1>
    <h1>{props.age}</h1>
    <h1>{props.isWorking?"yes":"no"}</h1>
    {props.skills.map((skill)=>(
        <h1>{skill}</h1>
    ))}

    <h3>{props.data.name}</h3>
    <h3>{props.data.age}</h3>
    <h3>{props.data.city}</h3>
    <h3>{props.data.kids.son}</h3>
    <h3>{props.data.kids.dtr}</h3>
    </>
  )
}
#######******Before return, Javascript code
####### Inside return html code along with js code
####### while writing Objects, we write key value as index.

######################## 3rd Class #####################
***In React, data can be send in unidirection only, in rare cases will send bidirectional using "CallBack function"
*** Using props, we send data from Parent to Child component.
*** We can't send data from child to parent.
*** We use "CallBack" function to send data in bidirectional.

@@@@@@@@Count, StateHandlers@@@@@@@@@@@@@@@@@@@@@@@
### initially count=0, to increase/decrease the count we use "+/-" buttons.
### we are mentioning "+/-" as incrementHandler & decrementHandler in the code, & before return writing functions for the same.

Before return:

const decrementHandler=()=>{
        count-=1;
    }
    console.log(count);
    
Inside return:
      <button onClick={decrementHandler}>-</button>

### now we are increasing count, but it won't show in the console.
### Count is increasing but not displaying, so we use dom manipulation using "States".
###In html real dom will be used. so only, every time page will be refresh & shows data.
### In react, we use real & virtual doms(useStates). virtual dom always works on the particular changes & gives to real dom. so the page won't refresh & gives the page what we require.

#### Using of Virtual dom(useState), we can able to see the changes in console,

const Count = () => {
    const[count, setCount]=useState(0)
    // let count=0;
    const incrementHandler=()=>{
        setCount(count+1);
    }
    const decrementHandler=()=>{
        setCount(count-1);
    }
    console.log(count); 
  return (
    <>
        <button onClick={decrementHandler}>-</button>
        <span>{count}</span>
        <button onClick={incrementHandler}>+</button>
    </>
  )
}

### like above, we can write multiplication & division handles.
### we can use Css properties here,

<span style={{backgroundColor:"blue"}}>{count}</span>

### If we need to change color for every click,


Before return fn:
const [isChangeColor, setIsChangeColor]=useState(!true)

const colorChangeHandler=()=>{
        setIsChangeColor(!false);
    }
Inside retun:
<button onClick={colorChangeHandler}>Color Change</button>

*************Navigation & Routes*******
### We need to install routes using, 
              "npmnpm i react-router-dom" in terminal window
### Import routes using, 
        import {BrowserRouter as Router, Routes, Route, Link} from "react-router-dom";
### Then, 
        inside return(
          <>
    <Router>
    <div>
      <ul>
        <li>
          <Link to= "/">Home</Link>
          <Link to= "/">Home</Link>         /////components
        </li>
      </ul>
    </div>
    <Routes>
    <Route path="/" element={<Home/>}/>       ///Import element/components in the top.
    </Routes>
    </Router>
    </>
        )